services:
  server-mysql:
    image: mysql:8
    container_name: server-mysql
    # ports:
    #   - "4100:3306"
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: 12345
      MYSQL_DATABASE: template_db
      MYSQL_USER: template_user
      MYSQL_PASSWORD: 12345
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 3s
    networks:
      - mysql-net

  client-mysql:
    image: phpmyadmin
    container_name: client-mysql
    ports:
      - "4101:80"
    restart: unless-stopped
    environment:
      PMA_ARBITRARY: 1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 3s
    depends_on:
      server-mysql:
        condition: service_healthy
    networks:
      - mysql-net

  server-rabbitmq:
    image: rabbitmq:management-alpine
    container_name: server-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - mysql-net

  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.3
    container_name: zookeeper
    hostname: zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    healthcheck:
      test: nc -z localhost 2181 || exit 1
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - mysql-net

  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:9092 --list
      interval: 10s
      timeout: 10s
      retries: 15
      start_interval: 10s
    ports:
      - 9092:9092
    networks:
      - mysql-net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - 8082:8080
    environment:
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    networks:
      - mysql-net

  appointment:
    image: 282865065290.dkr.ecr.us-east-1.amazonaws.com/appointment
    build:
      context: ./appointment
      dockerfile: Dockerfile
    container_name: appointment
    restart: unless-stopped
    depends_on:
      server-mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    # ports:
    #   - 3000:3000
    networks:
      - mysql-net

  appointment-co:
    image: 282865065290.dkr.ecr.us-east-1.amazonaws.com/appointment-co
    build:
      context: ./appointment-co
      dockerfile: Dockerfile
    container_name: appointment-co
    restart: unless-stopped
    depends_on:
      server-mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - mysql-net

  appointment-mx:
    image: 282865065290.dkr.ecr.us-east-1.amazonaws.com/appointment-mx
    build:
      context: ./appointment-mx
      dockerfile: Dockerfile
    container_name: appointment-mx
    restart: unless-stopped
    depends_on:
      server-mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - mysql-net

  appointment-pe:
    image: 282865065290.dkr.ecr.us-east-1.amazonaws.com/appointment-pe
    build:
      context: ./appointment-pe
      dockerfile: Dockerfile
    container_name: appointment-pe
    restart: unless-stopped
    depends_on:
      server-mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - mysql-net

  auth:
    image: 282865065290.dkr.ecr.us-east-1.amazonaws.com/auth
    build:
      context: ./auth
      dockerfile: Dockerfile
    container_name: auth
    restart: unless-stopped
    # ports:
    #   - 3050:3050
    networks:
      - mysql-net

  user:
    image: 282865065290.dkr.ecr.us-east-1.amazonaws.com/user
    build:
      context: ./user
      dockerfile: Dockerfile
    container_name: user
    restart: unless-stopped
    depends_on:
      server-mysql:
        condition: service_healthy
    # ports:
    #   - 3040:3040
    networks:
      - mysql-net

  gateway:
    image: 282865065290.dkr.ecr.us-east-1.amazonaws.com/gateway
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: gateway
    restart: unless-stopped
    ports:
      - 3060:3060
    networks:
      - mysql-net

networks:
  mysql-net:
    driver: bridge
    name: mysql-net
